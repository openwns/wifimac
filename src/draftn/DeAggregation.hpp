/******************************************************************************
 * WiFiMac                                                                    *
 * This file is part of openWNS (open Wireless Network Simulator)
 * _____________________________________________________________________________
 *
 * Copyright (C) 2004-2007
 * Chair of Communication Networks (ComNets)
 * Kopernikusstr. 16, D-52074 Aachen, Germany
 * phone: ++49-241-80-27910,
 * fax: ++49-241-80-22242
 * email: info@openwns.org
 * www: http://www.openwns.org
 * _____________________________________________________________________________
 *
 * openWNS is free software; you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License version 2 as published by the
 * Free Software Foundation;
 *
 * openWNS is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 ******************************************************************************/

#ifndef WIFIMAC_DRAFTN_DEAGGREGATION_HPP
#define WIFIMAC_DRAFTN_DEAGGREGATION_HPP

#include <WIFIMAC/lowerMAC/Manager.hpp>
#include <WIFIMAC/management/ProtocolCalculator.hpp>

#include <WIFIMAC/convergence/TxDurationSetter.hpp>
#include <WIFIMAC/convergence/ITxStartEnd.hpp>

#include <WNS/ldk/fu/Plain.hpp>
#include <WNS/ldk/Delayed.hpp>

#include <WNS/events/CanTimeout.hpp>
#include <WNS/Observer.hpp>

namespace wifimac { namespace draftn {

    class DeAggregationCommand:
		public wns::ldk::Command,
        public wifimac::convergence::TxDurationProviderCommand
	{
    public:
        DeAggregationCommand()
        {
            local.txDuration = 0;
            peer.finalFragment = true;
            peer.singleFragment = true;
        };

        struct {
            wns::simulator::Time txDuration;
        } local;

        struct {
            bool finalFragment;
            bool singleFragment;
        } peer;

        struct {} magic;

        wns::simulator::Time getDuration() const { return local.txDuration; }
    };

    /**
     * @brief FU required for the correct simulation of frame errors according
     * to A-MPDUs in IEEE 802.11n Draft 8.0
     *
     * The aggregation according to A-MPDUs (in contrast to A-MSDUs) allows to
     * extract single MPDUs out of an aggregation train even if other MPDUs have
     * bit errors: Each MPDUs is prefixed with a small header that can be
     * identified even if previous MPDUs have errors.
     *
     * To implement this feature, the train of MPDUs must not be handled as a
     * single compound (as generated by the aggregation FU
     * wifimac::draftN::Aggregation) and thus as a single event on the channel,
     * but as multiple events with their own SINR and error statistic. Hence,
     * the compound must be broken into fragments, one for each MPDU, before the
     * transmission, and re-assembled, if it was received error-free. This is
     * the task of the wifimac::draftN::DeAggregation FU, which should be placed
     * below the wifimac::lowerMAC and above the
     * wifimac::convergence::ErrorModel and CRC.
     *
     * Of course, the FU has to "translate" the onTxStart/onTxEnd of the
     * fragments into one onTxStart/onTxEnd for the whole frame - hence it is
     * both subject and observer for the wifimac::convergence::ITxStartEnd.
     */
	class DeAggregation :
		public wns::ldk::fu::Plain<DeAggregation, DeAggregationCommand>,
        public wns::ldk::Delayed<DeAggregation>,
        public wns::events::CanTimeout,
        public wifimac::convergence::TxStartEndNotification,
        public wns::Observer<wifimac::convergence::ITxStartEnd>
	{
	public:

		DeAggregation(wns::ldk::fun::FUN* fun, const wns::pyconfig::View& config);

		virtual
		~DeAggregation();

		/**
		 * @brief SDU and PCI size calculation
		 */
		void calculateSizes(const wns::ldk::CommandPool* commandPool, Bit& commandPoolSize, Bit& dataSize) const;

        /** @brief Observe TxStart of single fragments and relay the start of
         * the first one to upper FUs*/
        void
        onTxStart(const wns::ldk::CompoundPtr& compound);

        /** @brief Observe TxEnd of single fragments and relay the end of the
         * last one to upper FUs*/
        void
        onTxEnd(const wns::ldk::CompoundPtr& compound);

	private:
        /** 
         * @brief Re-assemble incoming fragments into one compounds, possibly
         *   with missing fragments due to reception errors. 
         */
		void
        processIncoming(const wns::ldk::CompoundPtr& compound);

        /**
         * @brief Split outgoing compounds into smaller fragments according to
         *   their transmission duration and send them piece by piece.
         *
         * The single fragments are stored into a txQueue which is worked on
         * using the onTimeout() function.
         */
        void
        processOutgoing(const wns::ldk::CompoundPtr& compound);

        /** @brief Checks if currently a compound is transmitted */
        bool
        hasCapacity() const;

        /** @brief Checks if fragments for transmission are pending*/
        const wns::ldk::CompoundPtr
        hasSomethingToSend() const;

        /** @brief Gets the next fragment for transmission */
        wns::ldk::CompoundPtr
        getSomethingToSend();

        /** @brief Initialization */
        void onFUNCreated();

        /** @brief CanTimeout realization */
        void onTimeout();

        const std::string managerName;
        const std::string protocolCalculatorName;
        const std::string txStartEndName;
        const std::string aggregationCommandName;

        /** @brief Storage of outgoing fragments of a single aggregated compound */
        std::deque<wns::ldk::CompoundPtr> txQueue;

        /** @brief Storage of aggregated compounds until all fragments are send */
        wns::ldk::CompoundPtr currentTxCompound;

        /** @brief Storage of received fragments until last fragment is received
         * (or timeout)
         */
        wns::ldk::CompoundPtr currentRxContainer;

        /** @brief signal the tx start only for the first fragment */
        bool doSignalTxStart;

        /** @brief Number of entries in current rx container */
        int numEntries;

        wns::logger::Logger logger;

        /** @brief Pointer to the protocol calculator the calculate the length
         * of the fragments */
        wifimac::management::ProtocolCalculator *protocolCalculator;

        struct Friends
        {
            wifimac::lowerMAC::Manager* manager;
        } friends;
    };
} // draftn
} // wifimac

#endif // WIFIMAC_DRAFTN_DEAGGREGATION_HPP
